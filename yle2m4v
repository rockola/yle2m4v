#!/usr/bin/env zsh
#
# yle2m4v
#
# Download video file (with subtitles, if any) from Yle Areena
# and convert the downloaded FLV file into a M4V file
#
# Usage: yle2m4v [url]
#
# url - Yle Areena page for video file
#
# The following external binaries have to be available in path:
# zsh    - this is a zsh script
#        - zsh is assumed to be in /usr/bin/zsh, OSX has it in /bin/zsh,
#          edit as appropriate     
# yle-dl - for downloading
#          http://aajanki.github.io/yle-dl/
# ffmpeg - for converting
#          http://www.ffmpeg.org/
#          (probably available via your system's package manager)
#
# (c) 2015 Ola Rinta-Koski
#
# TODO:
# - add -f (force) option to clobber existing FLV file
# - this script's functionality should really be part of yle-dl, so consider
#   this a quick stopgap hack
#
# v1.1

if [[ "$#" -ne 1 ]]
then
    echo "Usage: $0 [url]"
    exit 1
fi

title=$(yle-dl --showtitle $1)
title=$(echo $title | tr '/' '_')
target=${title}.m4v
flv=${title}.flv

if [[ -e "$flv" ]]
then
    # Do nothing, FLV already downloaded
else
    yle-dl $1
fi

subs=$(find . -maxdepth 1 -type f -name "${title}*.srt)" -print)

echo "Target ${target}"
echo "Subs $subs"
echo "FLV $flv"

if [[ -e $flv ]]
then
    args=( -i ./"$flv" )
    for s in $subs
    do
	args+=( '-i' ./"$s" )
    done
    args+=( '-map' 0 )
    for ((i = 0; i < $#subs; i++))
    do
	args+=( '-map' $((1+i)) )
    done
    args+=( -c copy )
    for ((i = 0; i < $#subs; i++))
    do
	args+=( -c:s mov_text )
    done
    args+=( ./"$target" )

    echo ARGS ${args}
    ffmpeg ${args}

    if [[ -e $target ]]
    then
        echo "Converted $flv -> $target, removing source file(s)"
        rm "$flv" ${subs}
    else
        echo "$flv -> $target conversion failed."
    fi
else
    echo "$1 download failed."
fi
